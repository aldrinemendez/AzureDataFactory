{
	"name": "df_HospitalAdmission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_HospitalAdmissionData",
						"type": "DatasetReference"
					},
					"name": "sourceHospitalAdmissionData"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourcecountryLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_DateDimLookup",
						"type": "DatasetReference"
					},
					"name": "sourceDateDimLookup"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectDaily"
				},
				{
					"name": "selectWeekly"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as string,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceHospitalAdmissionData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcecountryLookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDateDimLookup",
				"sourceHospitalAdmissionData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          Reported_date = date,",
				"          Reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select2 split(like(indicator, 'Daily%'),",
				"     like(indicator, 'Weekly%'),",
				"     disjoint: false) ~> split1@(Daily, Weekly, Default)",
				"select1, sourcecountryLookup lookup(select1@country == sourcecountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = select1@country,",
				"          indicator,",
				"          Reported_date,",
				"          Reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@Weekly, aggregate1 lookup(Reported_year_week == year_week,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"sourceDateDimLookup aggregate(groupBy(year_week = concat(year,'-W',lpad(week_of_year,2,'0'))),",
				"     start_Date = min(date),",
				"          end_Date = max(date)) ~> aggregate1",
				"lookup2 pivot(groupBy(country,",
				"          Reported_date,",
				"          Reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          year_week,",
				"          start_Date,",
				"          end_Date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(toFloat(value)),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeekly",
				"split1@Daily pivot(groupBy(country,",
				"          Reported_date,",
				"          Reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(toFloat(value)),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(desc(Reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(Reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_date,",
				"          hospital_occupancy_count = {count_Daily hospital occupancy},",
				"          ICU_occupancy_count = {count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week,",
				"          Reported_week_start_Date = start_Date,",
				"          Reported_week_end_Date = end_Date,",
				"          new_hospital_occupancy_count = {countWeekly new hospital admissions per 100k},",
				"          new_icu_occupancy_count = {countWeekly new ICU admissions per 100k},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly",
				"selectWeekly sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}