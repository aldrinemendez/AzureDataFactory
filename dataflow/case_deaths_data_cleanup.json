{
	"name": "case_deaths_data_cleanup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_death_csv_dl",
						"type": "DatasetReference"
					},
					"name": "caseDeathsData"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryCode"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_CasesDeaths",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeData"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "pivotIndicator"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "lookupCountryCode"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> caseDeathsData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryCode",
				"caseDeathsData filter(continent == 'Europe' &&  not(isNull(country_code))) ~> filterEuropeData",
				"filterEuropeData select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          Reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectColumns",
				"selectColumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          Reported_date,",
				"          source),",
				"     pivotBy(indicator),",
				"     Count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: false) ~> pivotIndicator",
				"pivotIndicator derive({Countconfirmed cases} = toLong(byName('Countconfirmed cases')),",
				"          Countdeaths = toLong(byName('Countdeaths'))) ~> MapDrifted1",
				"MapDrifted1, countryCode lookup(pivotIndicator@country == countryCode@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountryCode",
				"lookupCountryCode derive({confirmed cases_Count} = toLong(byName('confirmed cases_Count')),",
				"          deaths_Count = toLong(byName('deaths_Count'))) ~> MapDrifted2",
				"MapDrifted2 select(mapColumn(",
				"          country = pivotIndicator@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotIndicator@population,",
				"          {confirmed cases_Count},",
				"          deaths_Count,",
				"          Reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}